(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{116:function(n,e,t){"use strict";t.d(e,"a",(function(){return u})),t.d(e,"b",(function(){return f}));var r=t(0),o=t.n(r);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function c(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?c(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=o.a.createContext({}),s=function(n){var e=o.a.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):p(p({},e),n)),t},u=function(n){var e=s(n.components);return o.a.createElement(i.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return o.a.createElement(o.a.Fragment,{},e)}},d=o.a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,c=n.parentName,i=l(n,["components","mdxType","originalType","parentName"]),u=s(t),d=r,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return t?o.a.createElement(f,p(p({ref:e},i),{},{components:t})):o.a.createElement(f,p({ref:e},i))}));function f(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,c=new Array(a);c[0]=d;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=n,p.mdxType="string"==typeof n?n:r,c[1]=p;for(var i=2;i<a;i++)c[i]=t[i];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},99:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return a})),t.d(e,"metadata",(function(){return c})),t.d(e,"toc",(function(){return p})),t.d(e,"default",(function(){return i}));var r=t(3),o=(t(0),t(116));const a={title:"Canon (Elm v2)"},c={unversionedId:"examples/canon-elm2",id:"examples/canon-elm2",isDocsHomePage:!1,title:"Canon (Elm v2)",description:"`js",source:"@site/book/examples/canon-elm2.md",slug:"/examples/canon-elm2",permalink:"/book/examples/canon-elm2",version:"current"},p=[],l={toc:p};function i({components:n,...e}){return Object(o.b)("wrapper",Object(r.a)({},l,e,{components:n,mdxType:"MDXLayout"}),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},";(async () => {\n  const { app, sampler, pattern, music } = tuplet\n  const { c4, d4, e4, f4, g4, c5, rest } = music.pitches\n  const { wn, qn, den, sn, hn, ent } = music.durations\n\n  const model = {\n    bpm: 60.0,\n    parts: {\n      piano: {\n        notes: [\n          [c4, qn],\n          [c4, qn],\n          [c4, den],\n          [d4, sn],\n          [e4, qn],\n\n          [e4, den],\n          [d4, sn],\n          [e4, den],\n          [f4, sn],\n          [g4, hn],\n\n          [c5, ent],\n          [c5, ent],\n          [c5, ent],\n          [g4, ent],\n          [g4, ent],\n          [g4, ent],\n          [e4, ent],\n          [e4, ent],\n          [e4, ent],\n          [c4, ent],\n          [c4, ent],\n          [c4, ent],\n\n          [g4, den],\n          [f4, sn],\n          [e4, den],\n          [d4, sn],\n          [c4, hn],\n        ],\n        note: null,\n        loop: true,\n      },\n    },\n  }\n\n  const update = (model) => {\n    const piano = model.parts.piano\n    const melody = pattern(piano.notes, { loop: true })\n\n    return (model, time) => {\n      piano.note = melody.at(time)\n      return model\n    }\n  }\n\n  const view = async (model) => {\n    const piano = await sampler('piano')\n\n    return (model) => {\n      // console.log(model.parts.piano.note)\n      piano.play(model.parts.piano.note)\n    }\n    //   console.log(model)\n  }\n\n  app(model, update, view)\n})()\n")))}i.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{116:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return f}));var r=t(0),i=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=i.a.createContext({}),l=function(e){var n=i.a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=l(e.components);return i.a.createElement(m.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=l(t),d=r,f=s["".concat(a,".").concat(d)]||s[d]||u[d]||o;return t?i.a.createElement(f,c(c({ref:n},m),{},{components:t})):i.a.createElement(f,c({ref:n},m))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var m=2;m<o;m++)a[m]=t[m];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return a})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return m}));var r=t(3),i=(t(0),t(116));const o={title:"Twinkle"},a={unversionedId:"examples/twinkle",id:"examples/twinkle",isDocsHomePage:!1,title:"Twinkle",description:"`js",source:"@site/book/examples/twinkle.md",slug:"/examples/twinkle",permalink:"/book/examples/twinkle",version:"current"},c=[],p={toc:c};function m({components:e,...n}){return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:e,mdxType:"MDXLayout"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},";(async () => {\n  const { metronome, sampler, pattern, plugins } = tuplet\n  const { magenta } = plugins\n\n  TWINKLE_TWINKLE = {\n    notes: [\n      { pitch: 60, startTime: 0.0, endTime: 0.5 },\n      { pitch: 60, startTime: 0.5, endTime: 1.0 },\n      { pitch: 67, startTime: 1.0, endTime: 1.5 },\n      { pitch: 67, startTime: 1.5, endTime: 2.0 },\n      { pitch: 69, startTime: 2.0, endTime: 2.5 },\n      { pitch: 69, startTime: 2.5, endTime: 3.0 },\n      { pitch: 67, startTime: 3.0, endTime: 4.0 },\n      { pitch: 65, startTime: 4.0, endTime: 4.5 },\n      { pitch: 65, startTime: 4.5, endTime: 5.0 },\n      { pitch: 64, startTime: 5.0, endTime: 5.5 },\n      { pitch: 64, startTime: 5.5, endTime: 6.0 },\n      { pitch: 62, startTime: 6.0, endTime: 6.5 },\n      { pitch: 62, startTime: 6.5, endTime: 7.0 },\n      { pitch: 60, startTime: 7.0, endTime: 8.0 },\n    ],\n    totalTime: 8,\n  }\n\n  pattern.use(magenta)\n\n  const piano1 = await sampler('piano')\n  const piano2 = await sampler('piano')\n\n  const twinkle = await pattern.from(TWINKLE_TWINKLE)\n  const continued1 = await twinkle.continue({ loop: true })\n  const continued2 = await twinkle.continue({ loop: true })\n  // const combined = pattern.concat([twinkle, continued], { loop: true })\n  const metro = metronome({ bpm: 60 })\n\n  // console.log(melody.fold())\n\n  metro.on('tick', (time) => {\n    piano1.play(continued1.at(time))\n    piano2.play(continued2.at(time))\n  })\n\n  metro.start()\n})()\n")))}m.isMDXComponent=!0}}]);